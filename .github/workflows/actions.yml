name: Watchmen
on: [push]
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        shell: bash
        working-directory: ./infra
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    - name: Sample terraform command
      run: |
        terraform --help

    - name: Terraform init
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: terraform init -input=false

    - name: Terraform validation
      run: terraform validate

    - name: Terraform Plan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: 'terraform plan -var="db_username=${{ secrets.DB_USERNAME }}" -var="db_password=${{ secrets.DB_PASSWORD }}"'

    - name: Terraform apply
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: 'terraform apply -auto-approve -input=false -var="db_username=${{ secrets.DB_USERNAME }}" -var="db_password=${{ secrets.DB_PASSWORD }}"'

    - name: Terraform destroy
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: terraform destroy -auto-approve

  # run-cloud-custodian:
  #   needs: terraform
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #
  #   - name: üêç Set up Python 3.10
  #     uses: actions/setup-python@v3
  #     with:
  #       python-version: "3.10"
  #
  #   - name: Configure AWS credentials from Test account
  #     uses: aws-actions/configure-aws-credentials@v1
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: ap-southeast-2
  #
  #   - name: ‚òÅÔ∏è üëÆ üèòÔ∏è Install C7N and run the policies
  #     run: |
  #       echo "Create virtual environment for Cloud custodian"
  #       python3 -m venv custodian
  #       echo "Source the virtual environment"
  #       source custodian/bin/activate
  #       echo "Install Cloud Custodian"
  #       pip3 install c7n
  #       echo "Show PIP3 dependencies"
  #       pip3 freeze
  #       custodian schema aws
  #       custodian run -s out ./policies/ensure-that-encryption-is-enabled-for-rds-instances.yml
  #       custodian run -s out ./policies/ensure-buckets-are-encrypted.yml
  #       cd out
  #       aws s3 sync . s3://indebtedpresentationpoliciesoutput
